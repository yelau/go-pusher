// Code generated by protoc-gen-go.
// source: rpcpusher.proto
// DO NOT EDIT!

/*
Package pusher is a generated protocol buffer package.

It is generated from these files:
	rpcpusher.proto

It has these top-level messages:
	PusherMessage
	PusherReply
*/
package gen

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// 推送消息结构
type PusherMessage struct {
	Type         uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	AppId        uint32 `protobuf:"varint,2,opt,name=appId" json:"appId,omitempty"`
	From         uint64 `protobuf:"varint,3,opt,name=from" json:"from,omitempty"`
	To           uint64 `protobuf:"varint,4,opt,name=to" json:"to,omitempty"`
	Connid       uint64 `protobuf:"varint,5,opt,name=connid" json:"connid,omitempty"`
	ConnServerid uint32 `protobuf:"varint,6,opt,name=connServerid" json:"connServerid,omitempty"`
	Gid          uint64 `protobuf:"varint,7,opt,name=gid" json:"gid,omitempty"`
	Text         string `protobuf:"bytes,8,opt,name=text" json:"text,omitempty"`
	Time         uint64 `protobuf:"varint,9,opt,name=time" json:"time,omitempty"`
	Msgid        uint64 `protobuf:"varint,10,opt,name=msgid" json:"msgid,omitempty"`
	Platform     uint32 `protobuf:"varint,11,opt,name=platform" json:"platform,omitempty"`
}

func (m *PusherMessage) Reset()                    { *m = PusherMessage{} }
func (m *PusherMessage) String() string            { return proto.CompactTextString(m) }
func (*PusherMessage) ProtoMessage()               {}
func (*PusherMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 推送结构响应
type PusherReply struct {
	Result bool     `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Error  string   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Data   []string `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *PusherReply) Reset()                    { *m = PusherReply{} }
func (m *PusherReply) String() string            { return proto.CompactTextString(m) }
func (*PusherReply) ProtoMessage()               {}
func (*PusherReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*PusherMessage)(nil), "pusher.PusherMessage")
	proto.RegisterType((*PusherReply)(nil), "pusher.PusherReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for IPusher service

type IPusherClient interface {
	Push(ctx context.Context, in *PusherMessage, opts ...grpc.CallOption) (*PusherReply, error)
}

type iPusherClient struct {
	cc *grpc.ClientConn
}

func NewIPusherClient(cc *grpc.ClientConn) IPusherClient {
	return &iPusherClient{cc}
}

func (c *iPusherClient) Push(ctx context.Context, in *PusherMessage, opts ...grpc.CallOption) (*PusherReply, error) {
	out := new(PusherReply)
	err := grpc.Invoke(ctx, "/pusher.IPusher/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IPusher service

type IPusherServer interface {
	Push(context.Context, *PusherMessage) (*PusherReply, error)
}

func RegisterIPusherServer(s *grpc.Server, srv IPusherServer) {
	s.RegisterService(&_IPusher_serviceDesc, srv)
}

func _IPusher_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PusherMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPusherServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pusher.IPusher/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPusherServer).Push(ctx, req.(*PusherMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPusher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pusher.IPusher",
	HandlerType: (*IPusherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _IPusher_Push_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x49, 0x93, 0xa6, 0xc9, 0xa5, 0x01, 0x64, 0x40, 0xb2, 0x98, 0x50, 0xa6, 0x4e, 0x1d,
	0x80, 0x89, 0x85, 0xb9, 0x03, 0x12, 0x82, 0x27, 0x30, 0xcd, 0xb5, 0x54, 0x8a, 0xeb, 0xd3, 0xd9,
	0x45, 0xf4, 0xc5, 0x78, 0x3e, 0xec, 0x4b, 0x97, 0x6e, 0xf7, 0xbb, 0x7f, 0xdf, 0xa7, 0x0f, 0xae,
	0x98, 0xd6, 0x74, 0xf0, 0xdf, 0xc8, 0x4b, 0x62, 0x17, 0x9c, 0x2a, 0x47, 0xea, 0xfe, 0x32, 0x68,
	0xdf, 0xa5, 0x7c, 0x43, 0xef, 0xcd, 0x16, 0xd5, 0x1c, 0x8a, 0x70, 0x24, 0xd4, 0xd9, 0x43, 0xb6,
	0x68, 0x55, 0x0b, 0x53, 0x43, 0xb4, 0xea, 0xf5, 0x44, 0x30, 0x0e, 0x37, 0xec, 0xac, 0xce, 0x23,
	0x15, 0x0a, 0x60, 0x12, 0x9c, 0x2e, 0xa4, 0xbe, 0x84, 0x72, 0xed, 0xf6, 0xfb, 0x5d, 0xaf, 0xa7,
	0xc2, 0xb7, 0x30, 0x4f, 0xfc, 0x89, 0xfc, 0x83, 0x1c, 0xbb, 0xa5, 0xdc, 0x37, 0x90, 0x6f, 0x23,
	0xcc, 0x64, 0x25, 0x29, 0xe1, 0x6f, 0xd0, 0x55, 0xa4, 0x5a, 0x68, 0x67, 0x51, 0xd7, 0x32, 0x8b,
	0xba, 0xd6, 0xa7, 0x55, 0x10, 0xbc, 0x86, 0x8a, 0x06, 0x13, 0x36, 0x8e, 0xad, 0x6e, 0xd2, 0xa7,
	0xee, 0x05, 0x9a, 0xd1, 0xf7, 0x07, 0xd2, 0x70, 0x4c, 0xf2, 0x8c, 0xfe, 0x30, 0x04, 0xf1, 0x5d,
	0xa5, 0x7b, 0x64, 0x76, 0x2c, 0xbe, 0xe5, 0x79, 0x6f, 0x82, 0x89, 0xbe, 0xf3, 0x45, 0xfd, 0xf8,
	0x0a, 0xb3, 0xd5, 0x78, 0xac, 0x9e, 0xa1, 0x48, 0x95, 0xba, 0x5b, 0x9e, 0xe2, 0x39, 0x0b, 0xe3,
	0xfe, 0xe6, 0xbc, 0x2d, 0x5a, 0xdd, 0xc5, 0x57, 0x29, 0x21, 0x3e, 0xfd, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x94, 0x00, 0xe9, 0xfd, 0x57, 0x01, 0x00, 0x00,
}
